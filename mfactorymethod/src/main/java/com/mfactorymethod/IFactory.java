package com.mfactorymethod;

/**
 * 设计模式： 工厂方法
 *
 * 定义：     工厂方法模式（FACTORY METHOD）是一种常用的对象创建型设计模式,此模式的核心精神是封装类中不变的部分，
 *            提取其中个性化善变的部分为独立类，通过依赖注入以达到解耦、复用和方便后期维护拓展的目的。
 *            它的核心结构有四个角色，分别是抽象工厂；具体工厂；抽象产品；具体产品
 *
 * 应用场景： 第一种情况是对于某个产品，调用者清楚地知道应该使用哪个具体工厂服务，实例化该具体工厂，
 *            生产出具体的产品来。Java Collection中的iterator() 方法即属于这种情况
 *
 *            第二种情况，只是需要一种产品，而不想知道也不需要知道究竟是哪个工厂为生产的，即最终选用哪
 *            个具体工厂的决定权在生产者一方，它们根据当前系统的情况来实例化一个具体的工厂返回给使用者，
 *            而这个决策过程这对于使用者来说是透明的
 *
 * 优点：     首先完全实现‘开－闭 原则’，实现了可扩展。其次更复杂的层次结构，可以应用于产品结果复杂的场合
 *            工厂方法模式(Factory Method pattern)是最典型的模板方法模式(Template Method pattern)应用
 *
 * Factory 和 car 依赖关系  工厂依赖汽车。
 */

public interface IFactory {
    public IOperation createOperation();
}
